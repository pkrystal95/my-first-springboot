/*
1. Spring Initializr로 프로젝트 생성
  * 웹사이트 `start.spring.io`에 접속하여 아래와 같이 설정합니다.
      * **Project**: Gradle - Groovy
      * **Language**: Java
      * **Spring Boot**: 3.5.x (LTS)
      * **Packaging**: **War** (가장 중요)
      * **Java**: 17
      * **Dependencies**: `Spring Web`, `Spring Boot DevTools`
2. `build.gradle` 의존성 설정
  * WAR 프로젝트에서 JSP를 사용하려면, JSP 파일을 서블릿 클래스로 변환하고 컴파일해주는 **Jasper** 라이브러리가 필요합니다.
  * `spring-boot-starter-web`에 기본 포함되어 있지 않으므로 별도로 추가해야 합니다.
  * 또한, 내장 톰캣을 사용하지만 외부 톰캣 환경에도 배포할 수 있도록 `providedRuntime` 설정을 추가합니다.
*/

plugins {
	id 'java'
	id 'war' // 💡 'org.springframework.boot' 보다 먼저 선언될 수 있습니다. JAR 대신 WAR 파일을 빌드합니다.
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// 💡 웹 개발에 필요한 spring-webmvc, 내장 톰캣 등을 포함합니다.
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// 💡 코드 변경 시 자동 재시작 등 개발 편의 기능을 제공합니다.
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// 여기부터 복붙

	// 💡 WAR 파일을 외부 Tomcat에 배포할 때, 서버에 이미 Tomcat 라이브러리가 있으므로 빌드 시에는 제공만 받는다는 의미입니다.
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	// 💡 JSP 엔진(Jasper) 의존성을 추가합니다. JSP 파일을 서블릿으로 변환하고 컴파일하는 역할을 합니다.
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'

	// 💡 JSTL(JSP Standard Tag Library)을 사용하기 위한 의존성입니다. (선택 사항)
	implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api'
	implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl'
}

tasks.named('test') {
	useJUnitPlatform()
}